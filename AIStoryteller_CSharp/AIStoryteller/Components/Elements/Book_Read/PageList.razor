@using AIStoryteller_Repository.Payload.Response
@using AIStoryteller_Repository.Services
@using AIStoryteller.Components.Elements.Book_Read
@using Microsoft.AspNetCore.Components.Routing
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IPageService PageService
@inject NavigationManager NavManager
<div class="container row gx-0">
    <div class="overflow-auto page-list-row-height">
        @foreach (var pageResponse in _pageResponseList)
        {
            <div @onclick="()=>RefreshAudio(pageResponse)">
                <PageItemInList PageResponse="@pageResponse"></PageItemInList>
            </div>

        }
    </div>
    
</div>


<script>

    let audioElement;

    function initializeAudioPlayer() {
        audioElement = document.createElement('audio');
        document.body.appendChild(audioElement);
    }

    function playAudio(base64Audio) {
        stopAudio()
        audioElement.src = "data:audio/mpeg;base64,"+base64Audio;
        audioElement.play();
    }

    function stopAudio() {
        audioElement.pause();
        audioElement.src = '';
    }

</script>

@code {
    [Parameter]
    public string BookId { get; set; }
    private List<PageResponse> _pageResponseList = new List<PageResponse>();
    private string _base64Audio { get; set; }
    private PageResponse _selectedPage { get; set; }
    public async void StopAudioOnPageExit()
    {
        await JSRuntime.InvokeVoidAsync("stopAudio");
    }
    protected override async Task OnInitializedAsync()
    {
        int bookId = Convert.ToInt32(BookId);
        _pageResponseList = await PageService.GetPagesByBookId(bookId);
    }
    private async Task RefreshAudio(PageResponse pageResponse)
    {

        await JSRuntime.InvokeVoidAsync("stopAudio");
        byte[] audioBytes = File.ReadAllBytes(pageResponse.AudioPath);
        _base64Audio = Convert.ToBase64String(audioBytes);
        await JSRuntime.InvokeVoidAsync("playAudio", _base64Audio);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeAudioPlayer");
        }
    }

}

