@using AIStoryteller_Repository.Services
@using AIStoryteller.Payload.Request
@using AIStoryteller_Repository.Constants
@using AIStoryteller_Repository.DTO
@page "/upload"
@rendermode InteractiveServer
@inject IPdfService pdfService

<PageTitle>New Book</PageTitle>

<h1>New Book</h1>

<p role="status">Insert your book here to begin.</p>

<form @onsubmit="OnSubmit" class="needs-validation" novalidate>
    <div class="input-group mb-3">
        <InputFile class="form-control" id="inputFile" OnChange="OnBookChange" aria-describedby="uploadButton" required />
        <button class="btn btn-primary" type="submit" id="uploadButton">
            <span class="oi oi-cloud-upload" aria-hidden="true"></span> Upload Selected File
        </button>
    </div>
</form>


@code {
    bool IsUploadDisabled = false;
    private IBrowserFile _selectedFile;
    private byte[] _pdfFileByteArray;
    private async Task OnBookChange(InputFileChangeEventArgs e)
    {
        IsUploadDisabled = true;
        _selectedFile = e.GetMultipleFiles()[0];
        if (_selectedFile != null) IsUploadDisabled = false;
    }

    private async void OnSubmit()
    {
        //await ConvertPdfToByteArray();
        var bookDto = await GetNewBookDto();
        await pdfService.SavePdfToDatabase(bookDto);
    }

    private async Task<NewBookDto> GetNewBookDto()
    {
        Stream stream = _selectedFile.OpenReadStream(FileSpecifications.MaxFileSize);
        MemoryStream textDataStream = new MemoryStream();
        await stream.CopyToAsync(textDataStream);
        textDataStream.Position = 0;
        return new NewBookDto()
        {
            Name = _selectedFile.Name,
            Size = _selectedFile.Size,
            TextData = textDataStream

        };

    }
}
