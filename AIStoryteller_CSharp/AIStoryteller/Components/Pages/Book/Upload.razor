
@using AIStoryteller.Components.Elements.Book_Upload
@using AIStoryteller_Repository.Payload.Request
@using AIStoryteller_Repository.Services
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using AIStoryteller.Components.Elements
@inject IStorytellerService StorytellerService
@inject NavigationManager Navigation
@page "/book/upload"

@rendermode InteractiveServer

<head href="~/">

</head>

<PageTitle>New Book</PageTitle>

<div class="content mb-5 px-4">
    <div class="mb-5">
        <h2>Upload a New Book</h2>
        <p role="status">Insert your book here to begin</p>

        <div class="container">
            <div class="row">
                <div class="col-lg-4 col-md-4 col-sm-4">
                    <UploadPDFForm @ref="@_uploadPdfFormRef"></UploadPDFForm>
                </div>
                <div class="col-lg-8 col-md-8 col-sm-8">
                    <div class="container">
                        <div class="row">
                            <NewBookDetails @ref="@_newBookDetailsRef"></NewBookDetails>
                        </div>
                        <div class="row mt-2">
                            <div class="container mt-3">
                                <button @onclick="UploadBook" class="btn btn-primary">Upload</button>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </div>
        <div class="mb-2" hidden="@IsUploadProgressBarHidden">
            <ProgressBar ProgressBarValue="@_uploadProgressBarValue"></ProgressBar>
        </div>


    </div>
    @*<div class="mb-5" hidden="@IsConvertToAudiobookDisabled">
            <h2>Convert To Audiobook</h2>
            <p role="status">Would you like to convert your newly added book to audio format?</p>
            <div class="mb-2" hidden="@IsConvertAudiobookProgessBarDisabled">
                <ProgressBar ProgressBarValue="@_convertProgressBarValue"></ProgressBar>
            </div>
            <form @onsubmit="OnTTSConvertSubmit">
                <button class="btn btn-primary" type="submit" id="ttsButton" disabled="@IsConvertButtonDisabled">
                    <span class="oi oi-cloud-upload" aria-hidden="true"></span>
                    Convert
                </button>
            </form>
        </div>*@
</div>
@code {
    private NewBookDetails _newBookDetailsRef;
    private UploadPDFForm _uploadPdfFormRef;
    private NewBookRequest _newBookRequest;
    private string _uploadProgressBarValue = "";
    private string _convertProgressBarValue = "";
    private bool IsUploadButtonDisabled = true;
    private bool IsConvertButtonDisabled = false;
    private bool IsUploadProgressBarHidden = true;
    private HubConnection _hubConnection;
    private byte[] _bookTextData;
    private async Task UploadBook()
    {
        _newBookRequest = _newBookDetailsRef.GetBookDetails();
        _bookTextData = await _uploadPdfFormRef.GetAddedBook();
        if (_newBookRequest == null || _bookTextData == null)
        {
            return;
        }
        await BindBookTextDataToNewBookRequest();
        await StorytellerService.SaveBookToDatabase(_newBookRequest);

    }
    private async Task BindBookTextDataToNewBookRequest()
    {
        _newBookRequest.TextData = new MemoryStream(_bookTextData);
    }
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/progressHub"), options =>
            {
                options.SkipNegotiation = true;
                options.Transports = HttpTransportType.WebSockets;
            })
            .Build();

        _hubConnection.On<int>("UploadProgressChanged", async p =>
        {
            await InvokeAsync(() =>
            {
                _uploadProgressBarValue = $"{p}%";
                StateHasChanged();
            });
        });

        _hubConnection.On<int>("ConvertProgressChanged", async p =>
        {
            await InvokeAsync(() =>
            {
                _convertProgressBarValue = $"{p}%";
                StateHasChanged();
            });
        });

        await _hubConnection.StartAsync();
    }
}